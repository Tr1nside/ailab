const body = document.body;
const nightModeButton = document.querySelector('.night-mode');
const tabs = document.querySelector('.tabs');
let codeMirrorInstances = {};
const consoleOutput = document.querySelector('.console-output');
const consoleInput = document.querySelector('.console-input');
const socket = io();

// üîπ –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Python –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
const pythonKeywords = [
    // üîπ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ Python
    "False", "None", "True", "and", "as", "assert", "async", "await",
    "break", "class", "continue", "def", "del", "elif", "else", "except",
    "finally", "for", "from", "global", "if", "import", "in", "is",
    "lambda", "nonlocal", "not", "or", "pass", "raise", "return", "try",
    "while", "with", "yield",

    // üîπ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Python
    "abs", "all", "any", "bin", "bool", "bytearray", "bytes", "callable",
    "chr", "classmethod", "compile", "complex", "delattr", "dict", "dir",
    "divmod", "enumerate", "eval", "exec", "filter", "float", "format",
    "frozenset", "getattr", "globals", "hasattr", "hash", "help", "hex",
    "id", "input", "int", "isinstance", "issubclass", "iter", "len",
    "list", "locals", "map", "max", "memoryview", "min", "next", "object",
    "oct", "open", "ord", "pow", "print", "property", "range", "repr",
    "reversed", "round", "set", "setattr", "slice", "sorted", "staticmethod",
    "str", "sum", "super", "tuple", "type", "vars", "zip",

    // üîπ –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    "list", "tuple", "set", "frozenset", "dict",

    // üîπ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ –º–æ–¥—É–ª—è collections
    "deque", "defaultdict", "OrderedDict", "Counter", "ChainMap", "namedtuple",

    // üîπ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ –º–æ–¥—É–ª—è dataclasses
    "dataclass",

    // üîπ –î—Ä—É–≥–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    "array", "heapq", "queue", "PriorityQueue",

    // üîπ –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    "self", "__init__", "__main__", "os", "sys", "json", "time", "re",
    "math", "random", "datetime", "open", "read", "write", "close"
];
    

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
function pythonHint(cm) {
    const cur = cm.getCursor();
    const token = cm.getTokenAt(cur);
    const start = token.start;
    const end = cur.ch;
    const word = token.string.slice(0, end - start);
    if (!word.length) return;

    const existingWords = new Set(pythonKeywords);
    const doc = cm.getValue().match(/\b\w+\b/g) || [];
    doc.forEach(w => existingWords.add(w));

    const list = [...existingWords].filter(item => item.startsWith(word));

    return {
        list: list,
        from: CodeMirror.Pos(cur.line, start),
        to: CodeMirror.Pos(cur.line, end)
    };
}

// üîπ –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CodeMirror —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –∫–∞–∫ –≤ VS Code
function initializeCodeMirror(codeArea, content = "") {
    const cm = CodeMirror(codeArea, {
        mode: "python",
        theme: body.classList.contains('dark-mode') ? "dracula" : "default",
        lineNumbers: true,
        gutters: ["CodeMirror-linenumbers"],
        autoCloseBrackets: true,
        indentWithTabs: false,
        tabSize: 4,
        smartIndent: true,
        electricChars: true,
        extraKeys: {
            "Ctrl-Space": function(cm) {
                cm.showHint({ hint: pythonHint, completeSingle: false });
            },
            "Tab": function(cm) {
                if (cm.somethingSelected()) {
                    cm.indentSelection("add");
                } else {
                    cm.replaceSelection("    ", "end", "+input");
                }
            },
            "Shift-Tab": function(cm) {
                cm.indentSelection("subtract");
            },
            "Ctrl-/": function(cm) {
                cm.execCommand("toggleComment");
            }
        }
    });
    cm.setValue(content);

    cm.on("inputRead", function(cm, change) {
        if (change.text[0].match(/\w/) && cm.getTokenAt(cm.getCursor()).string.length > 0) {
            setTimeout(() => cm.showHint({ hint: pythonHint, completeSingle: false }), 100);
        }
    });

    return cm;
}


consoleInput.addEventListener('focus', () => {
    if (consoleInput.readOnly) {
        consoleInput.blur(); // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å, –µ—Å–ª–∏ –ø–æ–ª–µ readonly
    }
});

// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
consoleInput.readOnly = true;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ consoleInput
function updateConsoleInputClass() {
    if (consoleInput.readOnly) {
        consoleInput.classList.remove('console-input-active');
    } else {
        consoleInput.classList.add('console-input-active');
    }
}
updateConsoleInputClass();

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏
let darkMode = false;
if (!localStorage.getItem("darkMod")) {
    localStorage.setItem("darkMod", false);
    darkMode = false;
} else {
    darkMode = localStorage.getItem("darkMod");
    if (darkMode) {
        body.classList.toggle('dark-mode');
        nightModeButton.textContent = body.classList.contains('dark-mode') ? '‚òÄÔ∏è' : 'üåô';
        for (const tabId in codeMirrorInstances) {
            const cm = codeMirrorInstances[tabId];
            cm.setOption("theme", body.classList.contains('dark-mode') ? "dracula" : "default");
        }
    }
}
const storedTheme = localStorage.getItem('theme');
if (storedTheme === 'dark') {
    body.classList.add('dark-mode');
    nightModeButton.textContent = '‚òÄÔ∏è';
    for (const tabId in codeMirrorInstances) {
        const cm = codeMirrorInstances[tabId];
        cm.setOption("theme", "dracula");
    }
} else {
    body.classList.remove('dark-mode');
    nightModeButton.textContent = 'üåô';
    for (const tabId in codeMirrorInstances) {
        const cm = codeMirrorInstances[tabId];
        cm.setOption("theme", "default");
    }
}
nightModeButton.addEventListener('click', () => {
    body.classList.toggle('dark-mode');
    const isDark = body.classList.contains('dark-mode');
    nightModeButton.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    for (const tabId in codeMirrorInstances) {
        const cm = codeMirrorInstances[tabId];
        cm.setOption("theme", isDark ? "dracula" : "default");
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
function updateLineNumbers(cm, lineNumbers) {
    const numberOfLines = cm.lineCount();
    let numbers = "";
    for (let i = 1; i <= numberOfLines; i++) {
        numbers += i + "<br>";
    }
    lineNumbers.innerHTML = numbers;
}

// ======================================================================
// –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –≤–∫–ª–∞–¥–æ–∫
// ======================================================================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–∫–ª–∞–¥–∫–∏
function getNextTabId() {
    const existingIds = new Set();
    document.querySelectorAll('.tab:not([data-tab="create_tab"])').forEach(tab => {
        const num = parseInt(tab.dataset.tab.replace("tab", ""), 10);
        existingIds.add(num);
    });
    let newId = 1;
    while (existingIds.has(newId)) {
        newId++;
    }
    return `tab${newId}`;
}

// üîπ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
function createNewTab(customId = null, fileName = null, content = "", activate = true) {
    const newTabId = customId || getNextTabId();
    const newFileName = fileName || `file${newTabId.replace("tab", "")}.py`;

    const newTab = document.createElement('div');
    newTab.classList.add('tab');
    newTab.dataset.tab = newTabId;
    newTab.innerHTML = `<span>${newFileName}</span><span class="close-tab">√ó</span>
                        <input type="text" class="tab-input" value="${newFileName}">`;
    tabs.insertBefore(newTab, document.querySelector('.tab[data-tab="create_tab"]'));

    const codeArea = document.createElement('div');
    codeArea.classList.add('code-area');
    codeArea.dataset.tabContent = newTabId;
    document.querySelector('.container').insertBefore(codeArea, document.querySelector('.toolbar'));

    const cm = initializeCodeMirror(codeArea, content);
    codeMirrorInstances[newTabId] = cm;

    if (activate) activateTab(newTab);

    newTab.addEventListener('dblclick', () => startEditingTab(newTab));
    const inputElement = newTab.querySelector('.tab-input');
    inputElement.addEventListener('blur', () => finishEditingTab(newTab));
    inputElement.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') finishEditingTab(newTab);
    });
    saveTabsToLocalStorage();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏
function activateTab(tab) {
    const tabId = tab.dataset.tab;
    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
    document.querySelectorAll('.code-area[data-tab-content]').forEach(content => content.style.display = 'none');
    tab.classList.add('active');
    const codeArea = document.querySelector(`.code-area[data-tab-content="${tabId}"]`);
    codeArea.style.display = 'block';
    if (codeMirrorInstances[tabId]) {
        codeMirrorInstances[tabId].refresh();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏
function closeTab(tab) {
    const tabId = tab.dataset.tab;
    document.querySelector(`.tab[data-tab="${tabId}"]`).remove();
    document.querySelector(`.code-area[data-tab-content="${tabId}"]`).remove();
    delete codeMirrorInstances[tabId];
    const firstTab = document.querySelector('.tab:not([data-tab="create_tab"])');
    if (firstTab) {
        activateTab(firstTab);
    }
    saveTabsToLocalStorage();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
function startEditingTab(tab) {
    tab.classList.add('editing');
    const inputElement = tab.querySelector('.tab-input');
    inputElement.style.display = 'block';
    inputElement.focus();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
function finishEditingTab(tab) {
    tab.classList.remove('editing');
    const inputElement = tab.querySelector('.tab-input');
    const spanElement = tab.querySelector('span');
    spanElement.textContent = inputElement.value;
    inputElement.style.display = 'none';
    saveTabsToLocalStorage();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ –≤ localStorage
function saveTabsToLocalStorage() {
    const tabsData = [];
    document.querySelectorAll('.tab:not([data-tab="create_tab"])').forEach(tab => {
        const tabId = tab.dataset.tab;
        const fileName = tab.querySelector('span').textContent;
        const content = codeMirrorInstances[tabId] ? codeMirrorInstances[tabId].getValue() : "";
        tabsData.push({ id: tabId, name: fileName, content: content });
    });
    localStorage.setItem('savedTabs', JSON.stringify(tabsData));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –∏–∑ localStorage
function loadTabsFromLocalStorage() {
    const savedTabs = JSON.parse(localStorage.getItem('savedTabs')) || [];
    if (savedTabs.length === 0) return;
    document.querySelectorAll('.tab:not([data-tab="create_tab"])').forEach(tab => tab.remove());
    document.querySelectorAll('.code-area[data-tab-content]').forEach(area => area.remove());
    codeMirrorInstances = {};
    savedTabs.forEach(tabData => {
        createNewTab(tabData.id, tabData.name, tabData.content, false);
    });
    activateTab(document.querySelector('.tab:not([data-tab="create_tab"])'));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
tabs.addEventListener('click', (event) => {
    const tab = event.target.closest('.tab');
    if (!tab) return;
    if (event.target.classList.contains('close-tab')) {
        closeTab(tab);
        return;
    }
    if (tab.dataset.tab === 'create_tab') {
        createNewTab();
    } else {
        activateTab(tab);
    }
});
tabs.addEventListener('dblclick', (event) => {
    if (event.target.classList.contains('tab') && event.target.dataset.tab !== 'create_tab') {
        startEditingTab(event.target);
    }
});

// üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
const initialTab = document.querySelector('.tab[data-tab="tab1"]');
const initialCodeArea = document.querySelector('.code-area[data-tab-content="tab1"]');
codeMirrorInstances['tab1'] = initializeCodeMirror(initialCodeArea);
activateTab(initialTab);

initialTab.addEventListener('dblclick', function () { startEditingTab(this); });
const initialInputElement = initialTab.querySelector('.tab-input');
initialInputElement.addEventListener('blur', function () { finishEditingTab(initialTab); });
initialInputElement.addEventListener('keydown', function (event) {
    if (event.key === 'Enter') finishEditingTab(initialTab);
});


// –í—ã–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
window.addEventListener('load', loadTabsFromLocalStorage);
window.addEventListener('beforeunload', saveTabsToLocalStorage);
document.addEventListener('input', saveTabsToLocalStorage);
document.addEventListener('click', saveTabsToLocalStorage);

// –û—Ç—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏
function clearConsole() {
    localStorage.setItem("console", '')
    consoleOutput.value = "";
    consoleInput.classList.remove('console-input-active');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
function executeCode() {
    clearConsole();
    const activeTab = document.querySelector('.tab.active');
    if (!activeTab) {
        consoleOutput.value += "\n–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
        return;
    }
    const tabId = activeTab.dataset.tab;
    const activeEditor = codeMirrorInstances[tabId];
    if (!activeEditor) {
        consoleOutput.value += "\n–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏.";
        return;
    }
    const code = activeEditor.getValue();
    socket.emit('execute', code);
}
function appendToConsole(text) {
    consoleOutput.value += text;
    consoleOutput.scrollTop = consoleOutput.scrollHeight;
}

socket.on('request_input', (prompt) => {
    appendToConsole(prompt + "\n"); // –í—ã–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –≤ –∫–æ–Ω—Å–æ–ª—å
    consoleInput.readOnly = false;
    updateConsoleInputClass();
    consoleInput.focus();
});


socket.on('console_output', (data) => {
    appendToConsole(data + "\n");
});


function handleConsoleKeyPress(event) {
    if (event.key === "Enter") {
        event.preventDefault();
        const value = consoleInput.value.trim();
        if (value) {
            socket.emit('console_input', value);
            appendToConsole(value + "\n");
        }
        consoleInput.value = "";
        consoleInput.readOnly = true;
        consoleInput.classList.remove('console-input-active');
    }
}
consoleInput.addEventListener('keydown', handleConsoleKeyPress);

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ —Ñ–∞–π–ª
function saveCodeToFile() {
    const activeTab = document.querySelector('.tab.active');
    if (!activeTab) {
        showNotification("–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        return;
    }
    const tabId = activeTab.dataset.tab;
    const editor = codeMirrorInstances[tabId];
    if (!editor) {
        showNotification("–†–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }
    const codeContent = editor.getValue();
    const fileName = activeTab.querySelector('span').textContent || "code.txt";
    const blob = new Blob([codeContent], { type: "text/plain;charset=utf-8" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = fileName;
    link.click();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Å–æ–ª–∏ –≤ —Ñ–∞–π–ª
function saveConsoleToFile() {
    const consoleContent = consoleOutput.value;
    const blob = new Blob([consoleContent], { type: "text/plain;charset=utf-8" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "console_output.txt";
    link.click();
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function showNotification(message) {
    const notification = document.createElement("div");
    notification.className = "notification";
    notification.innerText = message;
    document.body.appendChild(notification);
    setTimeout(() => {
        notification.style.opacity = 1;
    }, 10);
    setTimeout(() => {
        notification.style.opacity = 0;
        setTimeout(() => {
            notification.remove();
        }, 500);
    }, 3000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä CodeMirror
function loadFile() {
    let fileInput = document.getElementById("fileInput");
    if (!fileInput) {
        fileInput = document.createElement("input");
        fileInput.type = "file";
        fileInput.id = "fileInput";
        fileInput.style.display = "none";
        document.body.appendChild(fileInput);
    }
    fileInput.click();
    fileInput.onchange = function () {
        const file = fileInput.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = function (event) {
            const activeTab = document.querySelector('.tab.active');
            if (!activeTab) {
                showNotification("–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                return;
            }
            const tabId = activeTab.dataset.tab;
            const editor = codeMirrorInstances[tabId];
            if (editor) {
                editor.setValue(event.target.result);
            }
        };
        reader.readAsText(file);
    };
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyToClipboard() {
    const text = consoleOutput.value;
    navigator.clipboard.writeText(text)
    .then(() => {
        showNotification("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!");
    })
    .catch(err => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: ", err);
    });
}
